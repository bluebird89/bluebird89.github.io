# 运行nginx用户和组，linux系统尤其重要，如出现403 forbidden错误，很有可能是这个没有设置正确。不配置或者配置为 user nobody nobody(window下不指定)，则默认所有用户都可以启动Nginx进程
user  www-data www-data;

# 工作进程个数，通常和cpu数量相同
# master进程是接收并分配给worker处理
# 如果开启了ssl和gzip一般设置为CPU数量的2倍，可以减少I/O操作
# 如果Nginx服务器还有其它服务，可以考虑适当减少
# auto：Nginx进程将自动检测
worker_processes  3| auto

#work 绑定 cpu(4 work 绑定 4cpu)
worker_cpu_affinity 0001 0010 0100 1000
#work 绑定 cpu (4 work 绑定 8cpu 中的 4 个)
worker_cpu_affinity 0000001 00000010 00000100 00001000

# 日志输出到标准错误输出 定义类型，[debug | info | notice | warn | error | crit]
error_log stderr;
#error_log  /var/log/logs/error.log  notice;

#日志文件存放路径 access_log path [format [buffer=size | off]]
access_log /data/nginx/logs/lazyegg.com/web/access.log combinedio;

# 系统守护进程在运行，需要在某文件中保存当前运行程序的主进程号
pid        /var/run/nginx.pid;

#  进程可以打开的最大描述符,可以限制为操作系统最大的限制65535, 超过10240了，会返回502错误
worker rlimit nofile 10240
# 配置文件引入
include mime.types

# 设置网络连接的序列化:该指令默认为on状态，表示会对多个Nginx进程接收连接进行序列化，防止多个进程对连接的争抢
# 所谓的 “惊群问题”，当一个新网络连接来到时，多个worker进程会被同时唤醒，但仅仅只有一个进程可以真正获得连接并处理之。如果每次唤醒的进程数目过多的话，其实是会影响一部分性能的
# accept_mutex on，那么多个worker将是以串行方式来处理，其中有一个worker会被唤醒
# accept_mutex off，那么所有的worker都会被唤醒，不过只有一个worker能获取新连接，其它的worker会重新进入休眠状态
# 这个值开关与否其实是要和具体场景挂钩
accept_mutex on | off;

# 是否允许同时接收多个网络连接:off:每个worker process 一次只能接收一个新到达的网络连接。若想让每个Nginx的worker process都有能力同时接收多个网络连接，则需要开启此配置
multi_accept on | off;

events {
    # 在Linux操作系统下，Nginx默认使用epoll事件模型,x在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式 事件驱动模型select|poll|kqueue|epoll|resig
    use epoll;
    # 单个后台worker process进程的最大并发链接数 Nginx作为反向代理服务器，计算公式最大连接数 = worker_processes * worker_connections / 4，所以这里客户端最大连接数是1024，这个可以增到8192，但不能超过worker_rlimit_nofile。当Nginx作为http服务器时，计算公式里面是除以2.
    worker_connections  1024;
    keepalive_timeout 60;
    # 打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存
    open_file_cache max=65535 inactive=60s;
    # 多长时间检查一次缓存的有效信息
    open_file_cache_valid 80s;

    # 使每个worker进程可以同时处理多个客户端请求 设置一个进程是否同时接受多个网络连接，默认为off
    multi_accept on
    # 使用内核的FD文件传输功能，可以减少user mode和kernel mode的切换，从而提升服务器性能
    # 不用 sendfile 的传统网络传输过程： 硬盘 >> kernel buffer >> user buffer >> kernel socket buffer >> 协议栈
    # 用 sendfile() 来进行网络传输的过程： 硬盘 >> kernel buffer (快速拷贝到 kernelsocket buffer) >>协议栈
    sendfile on
    # 当tcp_nopush设置为on时，会调用tcp_cork方法进行数据传输。 使用该方法会产生这样的效果：当应用程序产生数据时， 内核不会立马封装包，而是当数据量积累到一定量时才会封装，然后传输。
    tcp_nopush on
    # 关闭网络连接序列化，当其设置为开启的时候，将会对多个 Nginx 进程接受连接进行序列化，防止多个进程对连接的争抢。当服务器连接数不多时，开启这个参数会让负载有一定程度的降低。但是当服务器的吞吐量很大时，为了效率，请关闭这个参数；并且关闭这个参数的时候也可以让请求在多个 worker 间的分配更均衡。
    accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on
}

# 设定http服务器，利用它的反向代理功能实现负载均衡支持
http {
    # 文件扩展名与文件类型映射表
    include mime.types;
    # 设定默认文件类型
    default_type application/octet-stream;

    #默认编码
    charset utf-8;
    # Stop Displaying Server Version in Configuration
    server_tokens off; # 去掉Nginx版本号
    #服务器名字的hash表大小
    server_names_hash_bucket_size 128;

    # 客户端请求头部的缓冲区大小。
    client_header_buffer_size 32k;
    # 客大请求包头部信息的缓存个数与容量
    large_client_header_buffers 4 64k;

    #允许客户端请求的最大单个文件字节数
    client_max_body_size 8m;
    # 缓冲区代理缓冲用户用户端请求的最大字节数
    client_body_timeout 15;
    client_header_timeout 15;

    # 指定相应客户端的超时时间，这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关系连接。
    send_timeout 15;

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    sendfile on;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，
    # 对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    # 指令若size>0，则Nginx进程的每个worker process每次调用sendfile()传输的数据了最大不能超出此值；若size=0则表示不限制。默认值为0
    sendfile on;
    sendfile_max_chunk 3000;

    # 允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    tcp_nopush on;
    tcp_nodelay on;

    #开启目录列表访问，适合下载服务器，默认关闭
    autoindex on;
    autoindex_exact_size off;
    autoindex_localtime on;

    #长连接超时时间，单位是秒 涉及到浏览器的种类、后端服务器的超时设置、操作系统的设置，相对比较敏感
    # header_timeout 为可选项，表示在应答报文头部的 Keep-Alive 域设置超时时间：“Keep-Alive : timeout = header_timeout”
    keepalive_timeout 22 [header_timeout];
    # 单连接请求数上限:用于限制用户通过某一个连接向Nginx服务器发起请求的次数
    keepalive_requests number;

    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    # gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_static on;
    gzip_disable "msie6"; # IE6浏览器不启用压缩
    gzip_min_length 1k;    #最小压缩文件大小 允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大
    gzip_vary on;
    gzip_proxied any;
    gzip_buffers 4 16k;    #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0） 设置压缩级别，范围1-9,9压缩级别最高，也最耗费CPU资源
    gzip_comp_level 2;     #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;    # 压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;

    # Let NGINX get the real client IP for its access logs
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;

    # 日志格式 request_time 后端所花时间
    # $http_x_forwarded_for：真实ip地址
    log_format  main   $remote_addr - $remote_user [$time_local] "$request"
                      $status $body_bytes_sent $request_body "$http_referer"
                      "$http_user_agent" "$http_x_forwarded_for" "$request_time";
    log_format log_json '{ "@timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"referer": "$http_referer", '
        '"request": "$request", '
        '"status": $status, '
        '"bytes": $body_bytes_sent, '
        '"user_agent": "$http_user_agent", '
        '"http_x_forwarded": "$http_x_forwarded_for", '
        '"request_time": "$request_time"'
    ' }';
    log_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';
    map $status $loggable {
        ~^[23] 0;
        default 1;
    }

    access_log /var/log/nginx/access.log combined if=$loggable;

    access_log /var/log/nginx/access.log combined buffer=512k flush=1m;

    access_log /usr/local/var/log/nginx/access.log main;
    access_log logs/host.access.404.log  log404;
    access_log off; #取消服务日志

    application/javascript application/x-javascript application/json
    application/xml  application/rss+xml font/truetype application/x-font-ttf
    font/opentype application/vnd.ms-fontobject image/svg+xml;

    # Cache
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # 后端服务器连接的超时时间_发起握手等候响应超时时间
    proxy_connect_timeout 90;
    # 连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
    proxy_read_timeout 180;
    # 后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
    proxy_send_timeout 180;
    # 设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小
    proxy_buffer_size 256k;
    # 设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    # 设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长
    proxy_temp_file_write_size 256k;
    # proxy_temp_path和proxy_cache_path指定的路径必须在同一分区
    proxy_temp_path /data0/proxy_temp_dir;
    # 设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
    proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarder-For $remote_addr;

    # 设定负载均衡的服务器列表 weigth参数表示权值，权值越高被分配到的几率越大
    upstream phpbackend {
      server unix:/var/run/php5-fpm.sock1 weight=100 max_fails=5 fail_timeout=5;
      server unix:/var/run/php5-fpm.sock2 weight=100 max_fails=5 fail_timeout=5;
      server unix:/var/run/php5-fpm.sock3 weight=100 max_fails=5 fail_timeout=5;
      server unix:/var/run/php5-fpm.sock4 weight=100 max_fails=5 fail_timeout=5;
      server 192.168.8.3:80  weight=6;
    }

    # 加载本地虚拟机
    include /usr/local/etc/nginx/conf.d/`*.conf`;
    include servers/`*`;
    include vhost/`*.conf`;

    error_page   404  /404.html;

    server {
        location /status {
          stub_status on;
                 #allow IP地址;
                 #deny IP地址;
        }
    }
}
