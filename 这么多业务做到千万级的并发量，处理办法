这么多业务做到千万级的并发量，处理办法

redis：

当后续线程来获取数据时，虽然第一个还没有从数据库查完并更新缓存，但发现 key-time 存在，会获取旧的数据。

redis服务端是单线程处理客户端请求，也就是说客户端请求在服务端是串行化执行的，因此对服务端来说，并不存在并发问题。但业务方却存在并发操作redis中的同一个key的情况。

http://blog.51cto.com/effective/1671743

function gen(){
    echo "hello gen".PHP_EOL;//step1
    $ret = (yield "gen1");   //step2
    var_dump($ret);  //step3
    $ret = (yield "gen2");   //step4
    var_dump($ret);  //step5
}



$my_gen = gen();
var_dump($my_gen->current());
var_dump($my_gen->send("main send"));




<?php
function xrange($start, $limit, $step = 1) {
    if ($start < $limit) {
        if ($step <= 0) {
            throw new LogicException('Step must be +ve');
        }

        for ($i = $start; $i <= $limit; $i += $step) {
            yield $i;
        }
    } else {
        if ($step >= 0) {
            throw new LogicException('Step must be -ve');
        }

        for ($i = $start; $i >= $limit; $i += $step) {
            yield $i;
        }
    }
}

/*
 * 注意下面range()和xrange()输出的结果是一样的。
 */

echo 'Single digit odd numbers from range():  ';
foreach (range(1, 9, 2) as $number) {
    echo "$number ";
}
echo "\n";

echo 'Single digit odd numbers from xrange(): ';

foreach (xrange(1, 9, 2) as $number) {
    echo "$number ";
}
echo "\n";
var_dump(xrange());




（1）为应用层实现多任务提供了工具;
（2）协程不允许多任务同时执行，要执行其它协程，必须使用关键字yield主动放弃cpu控制权;
（3）协程需要自己写任务管理器，以及任务调度器；
（4）减轻了OS处理零散任务和轻量级任务的负担；



 内核态的线程是由操作系统来进行调度的，在切换线程上下文时，要先保存上一个线程的上下文，然后执行下一个线程，当条件满足时，切换回上一个线程，并恢复上下文。 协程也是如此，只不过，用户态的线程不是由操作系统来调度的，而是由程序员来调度的，是在用户态的。

yield这个关键字就是用来产生中断, 并保存当前的上下文的, 比如说程序的一段代码是访问远程服务器，那这个时候CPU就是空闲的，就用yield让出CPU，接着执行下一段的代码，如果下一段代码还是访问除CPU以外的其它资源，还可以调用yield让出CPU. 继续往下执行，这样就可以用同步的方式写异步的代码了.




 https://www.cnblogs.com/tingyugetc/p/6347286.html
https://www.jianshu.com/p/edef1cb7fee6

http://rango.swoole.com/archives/508

http://www.laruence.com/2015/05/28/3038.html

http://www.cnblogs.com/lynxcat/p/7954456.html

https://github.com/breeze2/lumen-swoole-http

https://breeze2.github.io/lumen-swoole-http/#/1_profiling_with_xhgui

https://github.com/barryvdh

https://github.com/tymondesigns/jwt-auth

https://codepen.io/tymondesigns/project/editor/XqdGjN

http://blog.csdn.net/cs729298/article/details/72912008

http://nginx.org/en/docs/windows.html

https://www.cnblogs.com/saysmy/p/6609796.html
